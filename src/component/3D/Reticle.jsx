/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import React, { useRef, useState } from "react";
import { useHitTest, useInteraction } from "@react-three/xr";
import { useResource } from "react-three-fiber";
import { useGLTF, Box } from "@react-three/drei/";
import { useStore } from "../../utility/useStore";
import { MeshPhongMaterial, Vector3, Quaternion } from "three";

export default function Model(props) {
  const position = useStore((state) => state.position);
  const setPosition = useStore((state) => state.setPosition);
  const [placed, setPlaced] = useState(false);
  const group = useResource();
  const dropPos = useRef();

  useInteraction(group, "onSelect", () => {
    if (!placed && dropPos.current) {
      var curPos = new Vector3();
      curPos.setFromMatrixPosition(dropPos.current);
      var curScale = new Vector3();
      curScale.setFromMatrixScale(dropPos.current);
      const curRotation = new Quaternion();
      curRotation.setFromRotationMatrix(dropPos.current);

      console.log(dropPos.current, { curPos, curScale, curRotation });
      //setPosition(dropPos.current);
    }
    setPlaced((placed) => !placed);

    //setPosition(dropPos.current);
  });

  useHitTest((hit) => {
    if (placed) return;
    hit.decompose(
      group.current.position,
      group.current.rotation,
      group.current.scale
    );
    // console.log(hit);
    dropPos.current = hit;
  });

  const { nodes, materials } = useGLTF("/reticle.glb");
  return (
    <group>
      <group ref={group} {...props} dispose={null}>
        <mesh
          visible={!placed}
          material={materials["Material.001"]}
          geometry={nodes.Torus.geometry}
          scale={[0.71, 0.71, 0.71]}
        ></mesh>
        <Box visible={placed} arg={[0.05, 0.05, 0.05]} position={[0, 0.025, 0]}>
          <meshPhongMaterial attach="material" color="#f3f3f3" wireframe />
        </Box>
      </group>
    </group>
  );
}
//visible={!placed}
